{"version":3,"sources":["<no source>","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/form/style/_module.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_space.scss","%3Cinput%20css%20bx_nVe%3E","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_element.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_styles.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_display.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_default.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_size.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_mask-image.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_position.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_font-weight.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/form/style/_scheme.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/legacy/style/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/form/style/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA,ACME,mECqBI,oBCrBN,CFKI,iFCgBE,mBAXA,CAWA,iBCjBN,CFQA,UGcI,4BAAA,CHbF,aAAA,CIKA,cAAA,CAGE,kBFXJ,CFME,kECKI,gBCRN,CFaA,cGAI,8BAAA,CHCF,aAAA,CITA,gBAAA,CAGE,mBAAA,CHHE,eARA,CAOA,YCON,CFOE,8ECVI,gBCMN,CFcA,eK5BI,kBAAA,CFaA,+BAAA,CErBA,YAAA,CAIA,kBAAA,CDSF,gBAAA,CAGE,mBAAA,CHAE,eAXA,CAWA,eCmBN,CI9BE,2CCsBE,gBAAA,CAkBA,6BAAA,CAFA,oBAAA,CADA,aAAA,CCME,uBAAA,CCrDJ,6DFsCM,CErCN,qDFqCM,CEjCN,2BF+C2B,CE9C3B,mBF8C2B,CAHzB,kDAAA,CCCE,sBNAN,CIxCE,sBAGI,UCiD+B,CPdjC,oBAAA,CC3BE,mBCyCN,CFNA,eK3CI,kBAAA,CFaA,iCAAA,CErBA,YAAA,CAIA,kBAAA,CDSF,gBAAA,CAGE,mBAAA,CHAE,eAXA,CAWA,eCsDN,CIjEE,2CCsBE,gBAAA,CAkBA,6BAAA,CAFA,oBAAA,CADA,aAAA,CCME,uBAAA,CCrDJ,+DFsCM,CErCN,uDFqCM,CEjCN,2BF+C2B,CE9C3B,mBF8C2B,CAHzB,kDAAA,CCCE,sBNmCN,CI3EE,sBAGI,UCiD+B,CPCjC,oBAAA,CC1CE,mBC4EN,CF7BA,eC/CM,kBCgFN,CF1BA,aAIE,QAAA,CCtDE,QAfE,CAeF,SAfE,CSVJ,iBRwHF,CFvCE,2BC5DI,kBCsGN,CFtCE,qBG3DE,4BAAA,CCRF,cAAA,COLA,eAAA,CPQE,kBAAA,CHAE,kBC4GN,CFvCI,mCW7EF,eAAA,CVQI,eAXA,CAWA,gBCiHN,CFrCE,sBUjGA,iBRyIF,CFhCI,2CK5FA,oBAAA,CARA,YAAA,CAgBA,cAAA,CAJA,0BAAA,CJQA,gBCuHJ,CFlCI,wCACE,mBAAA,CC1FA,eC+HN,CFlCM,oDC7FA,YCkIN,CFjCM,yDCjGA,oBCqIN,CFhCM,mDCrGA,eCwIN,CF9BI,qCACE,mBEgCN,CF7BQ,8EC9GF,oBC8IN,CFxBQ,0HCtHF,YCoJN,CFtBQ,wHC9HF,eC0JN,CIrKE,iDIFE,aAAA,CPkBA,oDAAA,CGbE,UNkJgB,CUpJlB,WAAA,CAXF,iBAAA,CAEE,UAAA,CFgDE,SNqIN,CI7KE,iDIFE,aAAA,CPkBA,sDAAA,CGbE,UN6JgB,CU/JlB,WAAA,CAXF,iBAAA,CAEE,UAAA,CFgDE,SN6IN,CU1LM,2DTqBF,iCDoLJ,CUhMM,2DTYF,+BDuLJ,CU1LM,iETGF,+BD0LJ,CUjLI,iBTTA,+BDuMJ,CUvLI,mBThBA,iCD0MJ,CUxJM,4BTlDF,+BDiPJ,CU5KM,0BTrEF,+BD2PJ,CUvKM,0BTpFF,iCDiQJ,CWnRI,2DCJA,qBXsBA,aAAA,CWrBE,cZ8RJ,CIzRA,2CSAE,2Db+RF,CI/RA,sFSME,4BAAA,CAEA,2BAAA,CADA,oBAAA,CPoCE,WAAA,CAHA,UNmQJ,CI3SA,2CSAE,6Db2SF,CUhTI,2DTqBF,aDkTF,CU9TI,2DTYF,aDuTF,CU1TI,iETGF,aD4TF,CUzTA,UTHE,aD0UF,CUjUE,iBTTA,aD+UF,CU/TE,mBThBA,aDoVF,CU5TA,cTxBE,UD6VF,CU9TA,eT/BE,aDsWF,CUhUA,eTtCE,aD+WF,CU7TI,4BTlDF,aDmYF,CInZA,iDHgBE,kCD8YF,CUzUI,0BTrEF,aDmZF,CInaA,iDHgBE,kCDwZF,CUpUI,0BTpFF,aD6ZF,CA1HF","file":"form.min.css","sourcesContent":[null,"////\n/// Form Module\n/// @group form\n////\n\n#{ns-group(select), ns-group(input)} {\n  &:not(:last-child) {\n    @include margin-bottom(6v);\n  }\n\n  #{ns(label)} {\n    #{ns(hint-text)} {\n      @include margin-top(1v);\n      @include margin-bottom(2v);\n    }\n  }\n}\n\n#{ns(label)} {\n  display: block;\n  @include text-style(md);\n\n  & + #{ns(input)},\n  & + #{ns(input-wrap)},\n  & + #{ns(select)} {\n    @include margin-top(2v);\n  }\n}\n\n/**\n * Style du texte d'aide\n */\n#{ns(hint-text)} {\n  display: block;\n  @include text-style(xs);\n  @include margin-y(0);\n\n  & + #{ns(input)},\n  & + #{ns(input-wrap)},\n  & + #{ns(select)} {\n    @include margin-top(2v);\n  }\n}\n\n/**\n * Style du texte d'erreur\n */\n#{ns(error-text)} {\n  @include display-flex(row, center);\n  @include text-style(xs);\n  @include margin-top(4v);\n  @include margin-bottom(0);\n\n  @include icon(error-fill, sm) {\n    display: inline-block;\n    @include margin-right(1v);\n  }\n}\n\n/**\n * Style du texte de l'état validé\n */\n#{ns(valid-text)} {\n  @include display-flex(row, center);\n  @include text-style(xs);\n  @include margin-top(4v);\n  @include margin-bottom(0);\n\n  @include icon(success-fill, sm) {\n    display: inline-block;\n    @include margin-right(1v);\n  }\n}\n\n#{ns-group(form)} {\n  @include margin-bottom(8v);\n}\n\n/**\n * Style d'un ensemble de champs\n */\n#{ns(fieldset)} {\n  @include relative;\n  @include margin(0);\n  @include padding(0);\n  border: 0;\n\n  #{ns(hint-text)} {\n    @include margin-bottom(4v);\n  }\n\n  &__legend {\n    @include margin-bottom(4v);\n    @include text-style(md);\n    @include font-weight(bold);\n\n    #{ns(hint-text)} {\n      @include margin-top(2v);\n      @include margin-bottom(0);\n      @include font-weight(regular);\n    }\n  }\n\n  &__content {\n    @include relative;\n  }\n\n  /**\n   * Modificateur pour afficher les éléments en inline\n   */\n  &--inline {\n    #{ns(fieldset__content)} {\n      @include display-flex(null, baseline, flex-start, wrap);\n      @include margin(-3v 0);\n    }\n\n    #{ns-group(checkbox)} {\n      display: inline-flex;\n      @include margin-bottom(0);\n\n      &:first-child {\n        @include margin-top(0);\n      }\n\n      &:not(:last-child) {\n        @include margin-right(5v);\n      }\n\n      &:last-child {\n        @include margin-bottom(0);\n      }\n    }\n\n    #{ns-group(radio)} {\n      display: inline-flex;\n\n      &:not(:last-child) {\n        input[type=\"radio\"] + label {\n          @include margin-right(7v);\n        }\n      }\n\n      &:first-child {\n        @include margin-top(0);\n\n        input[type=\"radio\"] + label {\n          @include margin-top(0);\n        }\n      }\n\n      &:last-child {\n        @include margin-bottom(0);\n\n        input[type=\"radio\"] + label {\n          @include margin-bottom(0);\n        }\n      }\n    }\n  }\n\n  /**\n   * Modificateur pour gérer l'état d'erreur\n   */\n  &--error {\n    #{ns(fieldset__content)} {\n      @include before('') {\n        @include absolute(3v, null, 3v, -2v, 2px);\n      }\n    }\n  }\n\n  /**\n   * Modificateur pour gérer l'état de validation\n   */\n  &--valid {\n    #{ns(fieldset__content)} {\n      @include before('') {\n        @include absolute(3v, null, 3v, -2v, 2px);\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  FORM\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-select-group:not(:last-child), .fr-input-group:not(:last-child) {\n  margin-bottom: 1.5rem;\n}\n.fr-select-group .fr-label .fr-hint-text, .fr-input-group .fr-label .fr-hint-text {\n  margin-top: 0.25rem;\n  margin-bottom: 0.5rem;\n}\n\n.fr-label {\n  display: block;\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.fr-label + .fr-input, .fr-label + .fr-input-wrap, .fr-label + .fr-select {\n  margin-top: 0.5rem;\n}\n\n/**\n * Style du texte d'aide\n */\n.fr-hint-text {\n  display: block;\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.fr-hint-text + .fr-input, .fr-hint-text + .fr-input-wrap, .fr-hint-text + .fr-select {\n  margin-top: 0.5rem;\n}\n\n/**\n * Style du texte d'erreur\n */\n.fr-error-text {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  margin-top: 1rem;\n  margin-bottom: 0;\n}\n.fr-error-text::before, .fr-error-text::after {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n.fr-error-text::before, .fr-error-text::after {\n  -webkit-mask-image: url(\"../../icons/system/fr--error-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--error-fill.svg\");\n}\n.fr-error-text::before, .fr-error-text::after {\n  --icon-size: 1rem;\n}\n.fr-error-text::before {\n  content: \"\";\n  display: inline-block;\n  margin-right: 0.25rem;\n}\n\n/**\n * Style du texte de l'état validé\n */\n.fr-valid-text {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  margin-top: 1rem;\n  margin-bottom: 0;\n}\n.fr-valid-text::before, .fr-valid-text::after {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n.fr-valid-text::before, .fr-valid-text::after {\n  -webkit-mask-image: url(\"../../icons/system/fr--success-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--success-fill.svg\");\n}\n.fr-valid-text::before, .fr-valid-text::after {\n  --icon-size: 1rem;\n}\n.fr-valid-text::before {\n  content: \"\";\n  display: inline-block;\n  margin-right: 0.25rem;\n}\n\n.fr-form-group {\n  margin-bottom: 2rem;\n}\n\n/**\n * Style d'un ensemble de champs\n */\n.fr-fieldset {\n  position: relative;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  /**\n   * Modificateur pour afficher les éléments en inline\n   */\n  /**\n   * Modificateur pour gérer l'état d'erreur\n   */\n  /**\n   * Modificateur pour gérer l'état de validation\n   */\n}\n.fr-fieldset .fr-hint-text {\n  margin-bottom: 1rem;\n}\n.fr-fieldset__legend {\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  font-weight: 700;\n}\n.fr-fieldset__legend .fr-hint-text {\n  margin-top: 0.5rem;\n  margin-bottom: 0;\n  font-weight: 400;\n}\n.fr-fieldset__content {\n  position: relative;\n}\n.fr-fieldset--inline .fr-fieldset__content {\n  display: flex;\n  align-items: baseline;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  margin: -0.75rem 0;\n}\n.fr-fieldset--inline .fr-checkbox-group {\n  display: inline-flex;\n  margin-bottom: 0;\n}\n.fr-fieldset--inline .fr-checkbox-group:first-child {\n  margin-top: 0;\n}\n.fr-fieldset--inline .fr-checkbox-group:not(:last-child) {\n  margin-right: 1.25rem;\n}\n.fr-fieldset--inline .fr-checkbox-group:last-child {\n  margin-bottom: 0;\n}\n.fr-fieldset--inline .fr-radio-group {\n  display: inline-flex;\n}\n.fr-fieldset--inline .fr-radio-group:not(:last-child) input[type=radio] + label {\n  margin-right: 1.75rem;\n}\n.fr-fieldset--inline .fr-radio-group:first-child {\n  margin-top: 0;\n}\n.fr-fieldset--inline .fr-radio-group:first-child input[type=radio] + label {\n  margin-top: 0;\n}\n.fr-fieldset--inline .fr-radio-group:last-child {\n  margin-bottom: 0;\n}\n.fr-fieldset--inline .fr-radio-group:last-child input[type=radio] + label {\n  margin-bottom: 0;\n}\n.fr-fieldset--error .fr-fieldset__content::before {\n  content: \"\";\n  position: absolute;\n  top: 0.75rem;\n  bottom: 0.75rem;\n  left: -0.5rem;\n  width: 2px;\n}\n.fr-fieldset--valid .fr-fieldset__content::before {\n  content: \"\";\n  position: absolute;\n  top: 0.75rem;\n  bottom: 0.75rem;\n  left: -0.5rem;\n  width: 2px;\n}\n\n.fr-select-group, .fr-input-group {\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état validé aux labels\n  */\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état d'erreur aux labels\n  */\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état inactif aux labels\n  */\n}\n.fr-select-group--valid label, .fr-input-group--valid label {\n  color: var(--text-default-success);\n}\n.fr-select-group--error label, .fr-input-group--error label {\n  color: var(--text-default-error);\n}\n.fr-select-group--disabled label, .fr-input-group--disabled label {\n  color: var(--text-disabled-grey);\n}\n\n.fr-label {\n  color: var(--text-label-grey);\n  /**\n  * Modificateur au niveau du label pour appliquer un état d'erreur au label\n  */\n  /**\n  * Modificateur au niveau du label pour appliquer un état de succès au label\n  */\n}\n.fr-label--error {\n  color: var(--text-default-error);\n}\n.fr-label--success {\n  color: var(--text-default-success);\n}\n\n/**\n* Style du texte d'aide\n*/\n.fr-hint-text {\n  color: var(--text-mention-grey);\n}\n\n/**\n* Style du texte d'erreur\n*/\n.fr-error-text {\n  color: var(--text-default-error);\n}\n\n/**\n* Style du texte de l'état validé\n*/\n.fr-valid-text {\n  color: var(--text-default-success);\n}\n\n/**\n* Style d'un ensemble de champs\n*/\n.fr-fieldset {\n  /**\n  * Mixin disabled pour gérer l'état disabled\n  */\n  /**\n  * Modificateur pour gérer l'état d'erreur\n  */\n  /**\n  * Modificateur pour gérer l'état de validation\n  */\n}\n.fr-fieldset:disabled label {\n  color: var(--text-disabled-grey);\n}\n\n.fr-fieldset__legend {\n  color: var(--text-title-grey);\n}\n.fr-fieldset--error .fr-fieldset__content::before {\n  box-shadow: inset 2px 0 0 0 var(--border-plain-error);\n}\n.fr-fieldset--error label {\n  color: var(--text-default-error);\n}\n.fr-fieldset--valid .fr-fieldset__content::before {\n  box-shadow: inset 2px 0 0 0 var(--border-plain-success);\n}\n.fr-fieldset--valid label {\n  color: var(--text-default-success);\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n  * Correctif de la largeur de la légende d'un fieldset\n  */\n  .fr-fieldset__legend {\n    max-width: 100%;\n  }\n\n  .fr-error-text::before, .fr-error-text::after {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n  .fr-error-text::before, .fr-error-text::after {\n    background-image: url(\"../../icons/system/fr--error-fill.svg\");\n  }\n  .fr-error-text::before, .fr-error-text::after {\n    width: 1rem;\n    height: 1rem;\n  }\n  .fr-valid-text::before, .fr-valid-text::after {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n  .fr-valid-text::before, .fr-valid-text::after {\n    background-image: url(\"../../icons/system/fr--success-fill.svg\");\n  }\n  .fr-valid-text::before, .fr-valid-text::after {\n    width: 1rem;\n    height: 1rem;\n  }\n}\n.fr-select-group, .fr-input-group {\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état validé aux labels\n  */\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état d'erreur aux labels\n  */\n  /**\n  * Modificateur au niveau du groupe pour appliquer un état inactif aux labels\n  */\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-select-group--valid label, .fr-input-group--valid label {\n    color: #18753c;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-select-group--error label, .fr-input-group--error label {\n    color: #ce0500;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-select-group--disabled label, .fr-input-group--disabled label {\n    color: #929292;\n  }\n}\n\n.fr-label {\n  /**\n  * Modificateur au niveau du label pour appliquer un état d'erreur au label\n  */\n  /**\n  * Modificateur au niveau du label pour appliquer un état de succès au label\n  */\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-label {\n    color: #161616;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-label--error {\n    color: #ce0500;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-label--success {\n    color: #18753c;\n  }\n}\n\n/**\n* Style du texte d'aide\n*/\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-hint-text {\n    color: #666;\n  }\n}\n\n/**\n* Style du texte d'erreur\n*/\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-error-text {\n    color: #ce0500;\n  }\n}\n\n/**\n* Style du texte de l'état validé\n*/\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-valid-text {\n    color: #18753c;\n  }\n}\n\n/**\n* Style d'un ensemble de champs\n*/\n.fr-fieldset {\n  /**\n  * Mixin disabled pour gérer l'état disabled\n  */\n  /**\n  * Modificateur pour gérer l'état d'erreur\n  */\n  /**\n  * Modificateur pour gérer l'état de validation\n  */\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset:disabled label {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset__legend {\n    color: #161616;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset--error .fr-fieldset__content::before {\n    box-shadow: inset 2px 0 0 0 #ce0500;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset--error label {\n    color: #ce0500;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset--valid .fr-fieldset__content::before {\n    box-shadow: inset 2px 0 0 0 #18753c;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fieldset--valid label {\n    color: #18753c;\n  }\n}","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon default\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-icon-url($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$DIST-PATH}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@function get-icon-pseudo($restrain) {\n  @if $restrain == before or $restrain == after {\n    @return $restrain;\n  }\n  @return before after;\n}\n\n@mixin _icon-pseudo ($restrain: null) {\n  @include _pseudo(get-icon-pseudo($restrain)) {\n    @content;\n  }\n}\n\n@mixin icon-size ($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    --icon-size: #{icon-size($size)};\n    @content;\n  }\n}\n\n@mixin icon-image ($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n\n  @include _icon-pseudo($restrain) {\n    @include mask-image($url);\n  }\n}\n\n@mixin icon-style($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    @include mask-image-size(100% 100%);\n    @content;\n  }\n}\n\n@mixin icon-content($is-before: true, $override: false) {\n  $pseudos: before after;\n  @if not $is-before {\n    $pseudos: after before;\n  }\n  @include _pseudo(nth($pseudos, 1), '') {\n    @content;\n  }\n  @if $override {\n    @include _pseudo(nth($pseudos, 2), none);\n  }\n}\n\n@mixin icon($icon: null, $size: md, $restrain: null, $styling: true, $is-before: $restrain != after, $override: false) {\n  @if $styling {\n    @include icon-style($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $restrain);\n  }\n\n  @if $is-before != null {\n    @include icon-content($is-before, $override) {\n      @content;\n    }\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image($icon);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : mask-image\n/// @group core\n////\n\n@mixin mask-image($value) {\n  -webkit-mask-image: $value;\n  mask-image: $value;\n}\n\n@mixin mask-image-size($value) {\n  -webkit-mask-size: $value;\n  mask-size: $value;\n}\n\n@mixin mask-image-position($value) {\n  -webkit-mask-position: $value;\n  mask-position: $value;\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// form Scheme\n/// @group form\n////\n\n@mixin _form-scheme($legacy: false) {\n  #{ns-group(select), ns-group(input)} {\n    /**\n    * Modificateur au niveau du groupe pour appliquer un état validé aux labels\n    */\n    &--valid {\n      label {\n        @include scheme-element-text-color(default success, (legacy:$legacy));\n      }\n    }\n\n    /**\n    * Modificateur au niveau du groupe pour appliquer un état d'erreur aux labels\n    */\n    &--error {\n      label {\n        @include scheme-element-text-color(default error, (legacy:$legacy));\n      }\n    }\n\n    /**\n    * Modificateur au niveau du groupe pour appliquer un état inactif aux labels\n    */\n    &--disabled {\n      label {\n        @include disabled-colors((legacy: $legacy, text: true));\n      }\n    }\n  }\n\n  #{ns(label)} {\n    @include scheme-element-text-color(label grey, (legacy:$legacy));\n\n    /**\n    * Modificateur au niveau du label pour appliquer un état d'erreur au label\n    */\n    &--error {\n      @include scheme-element-text-color(default error, (legacy:$legacy));\n    }\n\n    /**\n    * Modificateur au niveau du label pour appliquer un état de succès au label\n    */\n    &--success {\n      @include scheme-element-text-color(default success, (legacy:$legacy));\n    }\n  }\n\n  /**\n  * Style du texte d'aide\n  */\n  #{ns(hint-text)} {\n    @include scheme-element-text-color(mention grey, (legacy:$legacy));\n  }\n\n  /**\n  * Style du texte d'erreur\n  */\n  #{ns(error-text)} {\n    @include scheme-element-text-color(default error, (legacy:$legacy));\n  }\n\n  /**\n  * Style du texte de l'état validé\n  */\n  #{ns(valid-text)} {\n    @include scheme-element-text-color(default success, (legacy:$legacy));\n  }\n\n  /**\n  * Style d'un ensemble de champs\n  */\n  #{ns(fieldset)} {\n    /**\n    * Mixin disabled pour gérer l'état disabled\n    */\n    @include disabled {\n      label {\n        @include disabled-colors((legacy: $legacy, text: true));\n      }\n    }\n\n    &__legend {\n      @include scheme-element-text-color(title grey, (legacy:$legacy));\n    }\n\n    /**\n    * Modificateur pour gérer l'état d'erreur\n    */\n    &--error {\n      #{ns(fieldset__content)} {\n        @include before {\n          @include scheme-element-box-shadow-color(plain error, (legacy:$legacy), left-2-in);\n        }\n      }\n\n      label {\n        @include scheme-element-text-color(default error, (legacy:$legacy));\n      }\n    }\n\n    /**\n    * Modificateur pour gérer l'état de validation\n    */\n    &--valid {\n      #{ns(fieldset__content)} {\n        @include before {\n          @include scheme-element-box-shadow-color(plain success, (legacy:$legacy), left-2-in);\n        }\n      }\n\n      label {\n        @include scheme-element-text-color(default success, (legacy:$legacy));\n      }\n    }\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Form legacy\n/// @group form\n////\n\n@include legacy(ie11) {\n  /**\n  * Correctif de la largeur de la légende d'un fieldset\n  */\n  #{ns(fieldset)} {\n    &__legend {\n      max-width: 100%;\n    }\n  }\n\n  #{ns(error-text)} {\n    @include icon-legacy(error-fill, sm);\n  }\n\n  #{ns(valid-text)} {\n    @include icon-legacy(success-fill, sm);\n  }\n}\n","////\n/// Core Tool : Icon legacy\n/// @group core\n////\n\n@mixin icon-size-legacy($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    $size: icon-size($size);\n    @include size($size, $size);\n    @content;\n  }\n}\n\n@mixin icon-image-legacy($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n  @include _icon-pseudo($restrain) {\n    background-image: $url;\n  }\n}\n\n@mixin icon-style-legacy($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $restrain: null, $styling: true) {\n  @if $styling {\n    @include icon-style-legacy($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image-legacy($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $restrain);\n  }\n\n  @include _icon-pseudo($restrain) {\n    @content;\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image-legacy($icon);\n    }\n  }\n}\n"]}